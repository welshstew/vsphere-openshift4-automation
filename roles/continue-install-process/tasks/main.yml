---
- block:
    # - name: Prompt to power on VMs
      # pause: prompt='Please confirm you want to power on the VMs and continue the install process. Press return to continue. Press Ctrl+c and then "a" to abort:' 
    - name: Power On VMs
      shell: "govc vm.power -on -wait=true {{ item.name }}"
      with_items: "{{ machines }}"

    - name: Wait until bootstrap process is complete
      shell: "{{ tmpdir }}/openshift-install wait-for bootstrap-complete --log-level debug"
      args:
        chdir: "{{ tmpdir }}"

    - name: Approve all certificate signing requests!
      shell: "for i in {1..5}; do oc get csr -A -o name | xargs oc adm certificate approve; sleep 30; done"

    - name: Wait 5 minutes cluster operators to be all good
      pause:
        minutes: 5

    - name: Approve all certificate signing requests again!
      shell: "for i in {1..10}; do oc get csr -A -o name | xargs oc adm certificate approve; sleep 30; done"


    - name: Get Image Registry Cluster Operator (Wait For it....!)
      shell: "oc get csr -A -o name | xargs oc adm certificate approve > /dev/null && oc get co/image-registry -o name"
      ignore_errors: yes
      retries: 15
      delay: 60
      register: result
      until: result.rc == 0
    
    # - name: Cat patch file
    #   shell: "cat {{playbook_dir}}/roles/continue-install-process/files/patch-emptydir.json"
    #   register: cat_out

      #oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{}}}}'
    # - name: Patch registry storage as emptyDir
    #   shell: "oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{{cat_out.stdout}}'"
    
    - name: Wait for install process to Finalize
      shell: "{{ tmpdir }}/openshift-install wait-for install-complete"
      args:
        chdir: "{{ tmpdir }}"

    # remove and delete bootstrap machine here.
    - name: Power Off and Delete Bootstrap VM
      shell: "govc vm.power -off -wait=true bootstrap && govc vm.destroy bootstrap"

    # https://github.com/redhat-cop/openshift-lab-origin/blob/master/OpenShift4/Stopping_and_Resuming_OCP4_Clusters.adoc
    # - name: Apply the Credentials Manager
    #   shell: "oc create -f {{playbook_dir}}/roles/continue-install-process/files/kubelet-bootstrap-cred-manager-ds.yaml"

    # - name: Delete the Signer secrets
    #   shell: "oc delete secrets/csr-signer-signer secrets/csr-signer -n openshift-kube-controller-manager-operator"

    - name: Wait 15 minutes cluster operators to be all good
      pause:
        minutes: 15

    - name: Wait until all cluster operators are Available
      shell: "oc get csr -A -o name | xargs oc adm certificate approve > /dev/null && oc get co --no-headers | awk '{ print $3 }' | uniq"
      register: waiting_for_available
      until: waiting_for_available.stdout == 'True'
      retries: 10
      delay: 60

    - name: Wait until none of the cluster operators are Progressing
      shell: "oc get csr -A -o name | xargs oc adm certificate approve > /dev/null && oc get co --no-headers | awk '{ print $4 }' | uniq"
      register: waiting_for_progressing
      until: waiting_for_progressing.stdout == 'False'
      retries: 10
      delay: 60    

    # monitoring components workaround
    # - name: Get Config Map Definition
    #   shell: "oc get configmap extension-apiserver-authentication -n kube-system -o yaml > {{ tmpdir }}/extension-apiserver-authentication.yaml"

    # - name: Add an empty line to config map file
    #   lineinfile:
    #     path: "{{ tmpdir }}/extension-apiserver-authentication.yaml"
    #     insertafter: '-----END CERTIFICATE-----'
    #     line: ''

    # - name: Update Config Map with new file
    #   shell: "oc replace -f  {{ tmpdir }}/extension-apiserver-authentication.yaml"


    - name: Now Complete
      debug:
        msg: You should now be able to gracefully shutdown the VMs and recover the cluster using the power-on-and-recover.yml playbook
